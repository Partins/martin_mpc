#!/usr/bin/env python

PACKAGE = 'martin_mpc'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#[1.3, 1.3, 15.0, 1.0, 1.0, 1.0, 0.03, 0.03]
#[3, 3, 1.0]
#list of parameters

gen.add('tag_follow', bool_t,   0, 'tag_follow', False)

gen.add('Q0', double_t, 0, 'Q0', 7,   0, 100)
gen.add('Q1', double_t, 0, 'Q1', 7,   0, 100)
gen.add('Q2', double_t, 0, 'Q2', 97,  0, 500)
gen.add('Q3', double_t, 0, 'Q3', 1.0,   0, 100)
gen.add('Q4', double_t, 0, 'Q4', 1.0,   0, 100)
gen.add('Q5', double_t, 0, 'Q5', 1.0,   0, 100)
gen.add('Q6', double_t, 0, 'Q6', 0.03,  0, 100)
gen.add('Q7', double_t, 0, 'Q7', 0.03,  0, 100)

gen.add('R1', double_t, 0, 'R1', 3.0, 0, 100)
gen.add('R2', double_t, 0, 'R2', 3.0, 0, 100)
gen.add('R3', double_t, 0, 'R3', 1.0, 0, 100)

gen.add('Rd1', double_t, 0, 'Rd1', 0, 0, 100)
gen.add('Rd2', double_t, 0, 'Rd2', 0, 0, 100)
gen.add('Rd3', double_t, 0, 'Rd3', 0, 0, 100)

gen.add('K0', double_t, 0, 'K0', 0.0, 0, 100)
gen.add('K1', double_t, 0, 'K1', 0.0, 0, 100)
gen.add('K2', double_t, 0, 'K2', 0.0, 0, 100)
gen.add('K3', double_t, 0, 'K3', 0.0, 0, 100)
gen.add('K4', double_t, 0, 'K4', 0.0, 0, 100)
gen.add('K5', double_t, 0, 'K5', 0.0, 0, 100)
gen.add('K6', double_t, 0, 'K6', 0.0, 0, 100)
gen.add('K7', double_t, 0, 'K7', 0.0, 0, 100)

gen.add('P', double_t, 0, 'P', 0.0, -100, 100)
gen.add('I', double_t, 0, 'I', 0.0, -100, 100)
gen.add('D', double_t, 0, 'D', 0.0, -100, 100)







#mpc_Q_mat = gen.add_group("Q_mat")
##       Name                    Type      Reconfiguration level
##       Description
##       Default  Min  Max
#pi = 3.14
#mpc_Q_mat.add("min_ang",           double_t, 0,
#           "The angle of the first range measurement. The unit depends on ~ang_radians.",
#           -pi/2,-pi, pi)
#mpc_Q_mat.add("max_ang",           double_t, 0,
#           "The angle of the first range measurement. The unit depends on ~ang_radians.",
#            pi/2, -pi, pi)
#mpc_Q_mat.add("intensity",            bool_t,   0,
#        "Whether or not the hokuyo returns intensity values.",
#         False)
#mpc_Q_mat.add("cluster",              int_t,    0,
#        "The number of adjacent range measurements to cluster into a single reading",
#         1, 0, 99)
#mpc_Q_mat.add("skip",                 int_t,    0,
#        "The number of scans to skip between each measured scan",
#         0, 0,  9)
#mpc_Q_mat.add("port",                 str_t,    0,
#        "The serial port where the hokuyo device can be found",
#        "/dev/ttyACM0")
#mpc_Q_mat.add("calibrate_time",       bool_t,   0,
#        "Whether the node should calibrate the hokuyo's time offset",
#         True)
#mpc_Q_mat.add("frame_id",             str_t,    0,
#        "The frame in which laser scans will be returned",
#        "laser")
#mpc_Q_mat.add("time_offset",          double_t, 0,
#        "An offet to add to the timestamp before publication of a scan",
#         0, -0.25, 0.25)
#mpc_Q_mat.add("allow_unsafe_settings",bool_t,   0,
#        "Turn this on if you wish to use the UTM-30LX with an unsafe angular range. Turning this option on may cause occasional crashes or bad data. This option is a tempory workaround that will hopefully be removed in an upcoming driver version.",
#         False)
#
exit(gen.generate(PACKAGE, "martin_mpc", "mpc_params"))


#{'int_param': 26, 'str_param': 'Hello World', 'min_ang': -0.628, 'groups': {'id': 0, 'parent': 0, 'name': 'Default', 'type': '', 'state': True, 'groups': {'Q_mat': {'id': 1, 'parent': 0, 'name': 'Q_mat', 'type': '', 'state': True, 'groups': {}, 'parameters': {}, 'min_ang': -0.628}}, 'parameters': {}, 'int_param': 26, 'str_param': 'Hello World'}}
